{"version":3,"sources":["Scene.js","App.js","serviceWorker.js","index.js"],"names":["Scene","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","start","bind","assertThisInitialized","stop","animate","renderScene","computeBoundingBox","setupScene","destroyContext","handleWindowResize","window","addEventListener","width","container","clientWidth","height","clientHeight","renderer","THREE","antialias","setPixelRatio","devicePixelRatio","shadowMap","enabled","gammaOutput","gammaFactor","type","scene","background","camera","add","sphere","material","map","load","bumpMap","bumpScale","specularMap","loadTexture","specular","mesh","transparent","object","spotLight","position","set","ambLight","boundingBox","setFromObject","center","getCenter","size","getSize","maxDim","Math","max","x","y","z","fov","PI","cameraZ","tan","minZ","min","cameraToFarEdge","far","lookAt","updateProjectionMatrix","controls","OrbitControls","domElement","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableKeys","screenSpacePanning","enableRotate","autoRotate","autoRotateSpeed","enablePan","target","update","setSize","appendChild","frameId","requestAnimationFrame","render","cancelAnimationFrame","innerWidth","innerHeight","aspect","removeChild","forceContextLoss","context","_this2","react_default","a","createElement","ref","style","overflow","Component","App","src_Scene","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dafd5ee5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n    this.renderScene = this.renderScene.bind(this);\n    this.computeBoundingBox = this.computeBoundingBox.bind(this);\n    this.setupScene = this.setupScene.bind(this);\n    this.destroyContext = this.destroyContext.bind(this);\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n  }\n\n  componentWillMount() {\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentDidMount() {\n    this.setupScene();\n  }\n\n  setupScene() {\n    this.width = this.container.clientWidth;\n    this.height = this.container.clientHeight;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.shadowMap.enabled = true;\n    renderer.gammaOutput = true;\n    renderer.gammaFactor = 2.2;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    let scene = new THREE.Scene();\n    scene.background = new THREE.Color(\"black\");\n\n    let camera = new THREE.PerspectiveCamera(\n      60,\n      this.width / this.height,\n      0.25,\n      1000\n    );\n    scene.add(camera);\n\n    let sphere = new THREE.SphereGeometry(50, 300, 300);\n    let material = new THREE.MeshPhongMaterial({\n      map: new THREE.TextureLoader().load(\"/Assets/2_no_clouds_4k.jpg\"),\n      bumpMap: new THREE.TextureLoader().load(\"/Assets/elev_bump_4k.jpg\"),\n      bumpScale: 0.005,\n      specularMap: THREE.ImageUtils.loadTexture(\"/Assets/water_4k.png\"),\n      specular: new THREE.Color(\"grey\"),\n    });\n    let mesh = new THREE.Mesh(sphere, material);\n    scene.add(mesh);\n    sphere = new THREE.SphereGeometry(50.1, 300, 300);\n    material = new THREE.MeshPhongMaterial({\n      map: new THREE.TextureLoader().load(\"/Assets/fair_clouds_4k.png\"),\n      transparent: true,\n    });\n    mesh = new THREE.Mesh(sphere, material);\n    scene.add(mesh);\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.object = mesh;\n\n    let spotLight = new THREE.SpotLight(0xffffff, 0.25);\n    spotLight.position.set(45, 50, 15);\n    camera.add(spotLight);\n    this.spotLight = spotLight;\n\n    let ambLight = new THREE.AmbientLight(0x333333);\n    ambLight.position.set(5, 3, 5);\n    this.camera.add(ambLight);\n\n    this.computeBoundingBox();\n  }\n\n  computeBoundingBox() {\n    let offset = 1.6;\n    const boundingBox = new THREE.Box3();\n    boundingBox.setFromObject(this.object);\n    const center = boundingBox.getCenter();\n    const size = boundingBox.getSize();\n    const maxDim = Math.max(size.x, size.y, size.z);\n    const fov = this.camera.fov * (Math.PI / 180);\n    let cameraZ = maxDim / 2 / Math.tan(fov / 2);\n    cameraZ *= offset;\n    this.camera.position.z = center.z + cameraZ;\n    const minZ = boundingBox.min.z;\n    const cameraToFarEdge = minZ < 0 ? -minZ + cameraZ : cameraZ - minZ;\n\n    this.camera.far = cameraToFarEdge * 3;\n    this.camera.lookAt(center);\n    this.camera.updateProjectionMatrix();\n\n    let controls = new OrbitControls(this.camera, this.renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.enableZoom = true;\n    controls.zoomSpeed = 0.1;\n    controls.enableKeys = false;\n    controls.screenSpacePanning = false;\n    controls.enableRotate = true;\n    controls.autoRotate = true;\n    controls.dampingFactor = 1;\n    controls.autoRotateSpeed = 1.2;\n    controls.enablePan = false;\n    controls.target.set(center.x, center.y, center.z);\n    controls.update();\n    this.controls = controls;\n    this.renderer.setSize(this.width, this.height);\n    this.container.appendChild(this.renderer.domElement);\n    this.start();\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  animate() {\n    this.frameId = requestAnimationFrame(this.animate);\n    this.controls.update();\n    this.renderScene();\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  handleWindowResize() {\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.destroyContext();\n  }\n\n  destroyContext() {\n    this.container.removeChild(this.renderer.domElement);\n    this.renderer.forceContextLoss();\n    this.renderer.context = null;\n    this.renderer.domElement = null;\n    this.renderer = null;\n  }\n\n  render() {\n    const width = \"100%\";\n    const height = \"100%\";\n    return (\n      <div\n        ref={(container) => {\n          this.container = container;\n        }}\n        style={{\n          width: width,\n          height: height,\n          position: \"absolute\",\n          overflow: \"hidden\",\n        }}></div>\n    );\n  }\n}\n\nexport default Scene;\n","import React, { Component } from 'react';\nimport Scene from './Scene';\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Scene />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}